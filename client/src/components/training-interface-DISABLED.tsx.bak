import React, { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import {
  ArrowLeft,
  Send,
  Star,
  Sparkles,
  Bookmark,
  BookmarkCheck,
  User,
  Home,
  Shield,
} from "lucide-react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { DIFFICULTY_LEVELS, type DifficultyKey } from "@/lib/constants";
import type {
  TranslateResponse,
  ProblemResponse,
} from "@shared/schema";
import { useLocation } from "wouter";
import { SpeechButton } from "@/components/speech-button";
import { useAuth } from "@/components/auth-provider";

interface TrainingInterfaceProps {
  difficulty: DifficultyKey;
  onBack: () => void;
  onShowPayment: () => void;
}

interface TrainingMessage {
  type: "problem" | "user" | "evaluation";
  content: string;
  rating?: number;
  feedback?: string;
  correctTranslation?: string;
  explanation?: string;
  similarPhrases?: string[];
  improvements?: string[];
  timestamp: string;
  problemNumber?: number;
  isBookmarked?: boolean;
}

type AppState = "initial" | "waiting_for_answer" | "evaluating" | "showing_evaluation" | "daily_limit" | "error";

export function TrainingInterface({
  difficulty,
  onBack,
  onShowPayment,
}: TrainingInterfaceProps) {
  // Core state
  const [appState, setAppState] = useState<AppState>("initial");
  const [messages, setMessages] = useState<TrainingMessage[]>([]);
  const [input, setInput] = useState("");
  const [currentProblem, setCurrentProblem] = useState<string>("");
  const [problemNumber, setProblemNumber] = useState(1);
  const [currentSessionId, setCurrentSessionId] = useState<number | null>(null);
  
  // UI refs
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const queryClient = useQueryClient();
  const [, setLocation] = useLocation();
  const { user } = useAuth();

  // Bookmark management
  const [bookmarkedProblems, setBookmarkedProblems] = useState<Set<string>>(new Set());

  useEffect(() => {
    const saved = localStorage.getItem("bookmarkedProblems");
    if (saved) {
      setBookmarkedProblems(new Set(JSON.parse(saved)));
    }
  }, []);

  const saveBookmarks = (bookmarks: Set<string>) => {
    localStorage.setItem("bookmarkedProblems", JSON.stringify([...bookmarks]));
  };

  // Generate problem mutation
  const generateProblemMutation = useMutation({
    mutationFn: async (): Promise<ProblemResponse> => {
      const response = await apiRequest("POST", "/api/problem", {
        difficultyLevel: difficulty,
      });
      return response.json();
    },
    onSuccess: (data) => {
      console.log("Problem generated:", data.japaneseSentence);
      setCurrentProblem(data.japaneseSentence);
      
      const problemMessage: TrainingMessage = {
        type: "problem",
        content: data.japaneseSentence,
        timestamp: new Date().toISOString(),
        problemNumber: problemNumber,
        isBookmarked: bookmarkedProblems.has(data.japaneseSentence),
      };
      
      setMessages((prev) => [...prev, problemMessage]);
      setAppState("waiting_for_answer");
    },
    onError: (error: any) => {
      console.error("Problem generation error:", error);
      
      if (
        error.message?.includes("429") ||
        error.message?.includes("最大出題数")
      ) {
        const limitMessage: TrainingMessage = {
          type: "evaluation",
          content: "本日の最大出題数（100問）に達しました。明日また学習を再開できます。",
          timestamp: new Date().toISOString(),
        };
        setMessages((prev) => [...prev, limitMessage]);
        setAppState("daily_limit");
      } else {
        const errorMessage: TrainingMessage = {
          type: "evaluation",
          content: "問題の生成に失敗しました。しばらく待ってから再試行してください。",
          timestamp: new Date().toISOString(),
        };
        setMessages((prev) => [...prev, errorMessage]);
        setAppState("error");
      }
    },
  });

  // Translation evaluation mutation
  const evaluateTranslationMutation = useMutation({
    mutationFn: async (userTranslation: string): Promise<TranslateResponse> => {
      const response = await apiRequest("POST", "/api/translate", {
        japaneseSentence: currentProblem,
        userTranslation,
        difficultyLevel: difficulty,
      });
      return response.json();
    },
    onSuccess: (data) => {
      console.log("Translation evaluated:", data);
      setCurrentSessionId(data.sessionId);
      
      const evaluationMessage: TrainingMessage = {
        type: "evaluation",
        content: data.feedback || "",
        rating: data.rating,
        feedback: data.feedback,
        correctTranslation: data.correctTranslation,
        explanation: data.explanation,
        similarPhrases: data.similarPhrases,
        improvements: data.improvements,
        timestamp: new Date().toISOString(),
      };
      
      setMessages((prev) => [...prev, evaluationMessage]);
      setAppState("showing_evaluation");
    },
    onError: (error) => {
      console.error("Translation evaluation error:", error);
      setAppState("error");
    },
  });

  // Initialize with first problem on mount
  useEffect(() => {
    console.log("Initializing training interface for difficulty:", difficulty);
    setMessages([]);
    setProblemNumber(1);
    setCurrentProblem("");
    setCurrentSessionId(null);
    setAppState("initial");
    
    // Start with first problem
    generateProblemMutation.mutate();
  }, [difficulty]);

  const handleSubmit = () => {
    if (!input.trim() || appState !== "waiting_for_answer") return;

    const userMessage: TrainingMessage = {
      type: "user",
      content: input.trim(),
      timestamp: new Date().toISOString(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setAppState("evaluating");
    evaluateTranslationMutation.mutate(input.trim());
    setInput("");
  };

  const handleNextProblem = () => {
    if (appState !== "showing_evaluation") return;
    
    console.log("Moving to next problem:", problemNumber + 1);
    setProblemNumber(prev => prev + 1);
    setCurrentProblem("");
    setCurrentSessionId(null);
    setAppState("initial");
    
    // Generate next problem
    generateProblemMutation.mutate();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSubmit();
    }
  };

  const toggleBookmark = async (problemText: string) => {
    const newBookmarks = new Set(bookmarkedProblems);

    if (newBookmarks.has(problemText)) {
      newBookmarks.delete(problemText);
    } else {
      newBookmarks.add(problemText);
    }

    setBookmarkedProblems(newBookmarks);
    saveBookmarks(newBookmarks);

    if (currentSessionId) {
      try {
        await apiRequest("POST", `/api/sessions/${currentSessionId}/bookmark`, {
          isBookmarked: !bookmarkedProblems.has(problemText),
        });
        queryClient.invalidateQueries({
          queryKey: ["/api/bookmarked-sessions"],
        });
      } catch (error) {
        console.error("Failed to update bookmark in database:", error);
      }
    }
  };

  // Auto-resize textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height =
        Math.min(textareaRef.current.scrollHeight, 128) + "px";
    }
  }, [input]);

  // Scroll to bottom when messages change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${
          i < rating ? "text-yellow-400 fill-current" : "text-gray-300"
        }`}
      />
    ));
  };

  const getInputPlaceholder = () => {
    switch (appState) {
      case "waiting_for_answer":
        return "英訳を入力してください...";
      case "evaluating":
        return "評価中...";
      case "daily_limit":
        return "本日の制限に達しました";
      case "error":
        return "エラーが発生しました";
      default:
        return "問題の読み込み中...";
    }
  };

  const isInputDisabled = () => {
    return appState !== "waiting_for_answer" || evaluateTranslationMutation.isPending;
  };

  const showNextButton = appState === "showing_evaluation";
  const showSubmitButton = appState === "waiting_for_answer" && input.trim();

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 px-2 sm:px-4 py-3">
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center space-x-2 flex-shrink-0">
            <Button
              variant="ghost"
              size="sm"
              className="p-2 rounded-full hover:bg-gray-100"
              onClick={onBack}
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div className="flex items-center space-x-2">
              <Sparkles className="w-5 h-5 text-blue-600" />
              <span className="font-semibold text-gray-900 text-sm sm:text-base">
                {DIFFICULTY_LEVELS[difficulty]}
              </span>
            </div>
          </div>

          <div className="flex-1 text-center">
            {messages.length > 0 && (
              <span className="text-xs sm:text-sm text-gray-600 font-medium">
                問題 {problemNumber}
              </span>
            )}
          </div>

          <div className="flex items-center space-x-1 flex-shrink-0">
            <Button
              variant="ghost"
              size="sm"
              className="p-2 rounded-full hover:bg-gray-100"
              onClick={() => setLocation("/admin")}
            >
              <Shield className="w-4 h-4" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="p-2 rounded-full hover:bg-gray-100"
              onClick={() => setLocation("/mypage")}
            >
              <User className="w-4 h-4" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="p-2 rounded-full hover:bg-gray-100"
              onClick={() => setLocation("/")}
            >
              <Home className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto px-2 sm:px-4 py-4">
        <div className="max-w-2xl mx-auto space-y-4">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`flex ${
                message.type === "user" ? "justify-end" : "justify-start"
              }`}
            >
              <div
                className={`max-w-[85%] rounded-2xl px-4 py-3 ${
                  message.type === "user"
                    ? "bg-blue-600 text-white"
                    : message.type === "problem"
                    ? "bg-white border border-gray-200 shadow-sm"
                    : "bg-gray-100 text-gray-900"
                }`}
              >
                {message.type === "problem" && (
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-full">
                        問題 {message.problemNumber}
                      </span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <SpeechButton
                        text={message.content}
                        className="text-gray-400 hover:text-gray-600"
                      />
                      <Button
                        variant="ghost"
                        size="sm"
                        className="p-1 hover:bg-gray-100"
                        onClick={() => toggleBookmark(message.content)}
                      >
                        {bookmarkedProblems.has(message.content) ? (
                          <BookmarkCheck className="w-4 h-4 text-blue-600" />
                        ) : (
                          <Bookmark className="w-4 h-4 text-gray-400" />
                        )}
                      </Button>
                    </div>
                  </div>
                )}

                <div className="text-sm sm:text-base leading-relaxed">
                  {message.content}
                </div>

                {message.type === "evaluation" && (
                  <div className="mt-3 space-y-3">
                    {message.rating && (
                      <div className="flex items-center space-x-2">
                        <span className="text-xs font-medium text-gray-600">
                          評価:
                        </span>
                        <div className="flex space-x-1">
                          {renderStars(message.rating)}
                        </div>
                        <span className="text-xs text-gray-600">
                          ({message.rating}/5)
                        </span>
                      </div>
                    )}

                    {message.correctTranslation && (
                      <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <span className="text-xs font-medium text-green-700 mb-1 block">
                              模範解答:
                            </span>
                            <p className="text-sm text-green-800">
                              {message.correctTranslation}
                            </p>
                          </div>
                          <SpeechButton
                            text={message.correctTranslation}
                            className="text-green-600 hover:text-green-700 ml-2"
                            lang="en-US"
                            rate={0.8}
                          />
                        </div>
                      </div>
                    )}

                    {message.explanation && (
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                        <span className="text-xs font-medium text-blue-700 mb-1 block">
                          解説:
                        </span>
                        <p className="text-sm text-blue-800">
                          {message.explanation}
                        </p>
                      </div>
                    )}

                    {message.similarPhrases && message.similarPhrases.length > 0 && (
                      <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                        <span className="text-xs font-medium text-purple-700 mb-2 block">
                          類似表現:
                        </span>
                        <div className="space-y-1">
                          {message.similarPhrases.map((phrase, idx) => (
                            <div key={idx} className="flex items-center justify-between">
                              <p className="text-sm text-purple-800">{phrase}</p>
                              <SpeechButton
                                text={phrase}
                                className="text-purple-600 hover:text-purple-700 ml-2"
                                lang="en-US"
                                rate={0.8}
                              />
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {message.improvements && message.improvements.length > 0 && (
                      <div className="bg-orange-50 border border-orange-200 rounded-lg p-3">
                        <span className="text-xs font-medium text-orange-700 mb-2 block">
                          改善点:
                        </span>
                        <div className="space-y-1">
                          {message.improvements.map((improvement, idx) => (
                            <p key={idx} className="text-sm text-orange-800">
                              • {improvement}
                            </p>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}

          {/* Loading indicator */}
          {(generateProblemMutation.isPending || evaluateTranslationMutation.isPending) && (
            <div className="flex justify-center">
              <div className="bg-white border border-gray-200 shadow-sm rounded-2xl px-4 py-3">
                <div className="text-sm text-gray-600">
                  {generateProblemMutation.isPending ? "問題を生成中..." : "評価中..."}
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </div>

      {/* Input */}
      <div className="bg-white border-t border-gray-200 px-2 sm:px-4 py-3">
        <div className="max-w-2xl mx-auto">
          {showNextButton ? (
            <Button
              onClick={handleNextProblem}
              className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 rounded-xl"
              disabled={generateProblemMutation.isPending}
            >
              次の問題へ
            </Button>
          ) : (
            <div className="flex space-x-2">
              <div className="flex-1 relative">
                <Textarea
                  ref={textareaRef}
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={getInputPlaceholder()}
                  disabled={isInputDisabled()}
                  className="resize-none pr-12 min-h-[44px] max-h-32"
                  rows={1}
                />
              </div>
              <Button
                onClick={handleSubmit}
                disabled={!showSubmitButton}
                className="bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-xl"
              >
                <Send className="w-5 h-5" />
              </Button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}