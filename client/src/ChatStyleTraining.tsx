import React, { useState, useRef, useEffect } from "react";

// Web Speech API utility function
const speakText = (text: string) => {
  if ('speechSynthesis' in window) {
    // Cancel any ongoing speech
    window.speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = 'en-US';
    utterance.rate = 0.8; // Slightly slower for learning
    utterance.pitch = 1.0;
    utterance.volume = 1.0;
    
    window.speechSynthesis.speak(utterance);
  }
};

type DifficultyLevel =
  | "toeic"
  | "middle_school"
  | "high_school"
  | "basic_verbs"
  | "business_email"
  | "simulation";

interface Problem {
  japaneseSentence: string;
  modelAnswer: string;
  hints: string[];
  difficulty: string;
}

interface ChatMessage {
  id: string;
  type:
    | "problem"
    | "user_answer"
    | "evaluation"
    | "overall_evaluation"
    | "model_answer"
    | "explanation"
    | "similar_phrases"
    | "next_button"
    | "system";
  content: string;
  rating?: number;
  phrases?: string[];
  detailedComment?: string;
  timestamp: Date;
}

interface EvaluationResult {
  rating: number;
  modelAnswer: string;
  explanation: string;
  similarPhrases: string[];
  overallEvaluation?: string;
  detailedComment?: string;
  correctTranslation?: string;  // API response field
  feedback?: string;            // API response field
}

export default function ChatStyleTraining({
  difficulty,
  onBackToMenu,
  onGoToMyPage,
  initialProblem,
  isBookmarkMode,
}: {
  difficulty: DifficultyLevel;
  onBackToMenu: () => void;
  onGoToMyPage: () => void;
  initialProblem?: { japaneseSentence: string; modelAnswer: string };
  isBookmarkMode?: boolean;
}) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [userInput, setUserInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [currentProblem, setCurrentProblem] = useState<Problem | null>(null);
  const [awaitingAnswer, setAwaitingAnswer] = useState(false);
  const [problemCount, setProblemCount] = useState(1);
  const [bookmarkedProblems, setBookmarkedProblems] = useState<Set<string>>(
    new Set(),
  );
  const [availableBookmarks, setAvailableBookmarks] = useState<string[]>([]);
  const [usedBookmarks, setUsedBookmarks] = useState<Set<string>>(new Set());
  const [usedProblems, setUsedProblems] = useState<Set<string>>(new Set());
  const [isStarted, setIsStarted] = useState(false);

  // ‰∫åÈáçÂÆüË°åÈò≤Ê≠¢Áî®„ÅÆRef
  const loadingProblemRef = useRef(false);
  const evaluatingRef = useRef(false);
  const submittingRef = useRef(false);
  const initializedRef = useRef(false);


  // Èõ£ÊòìÂ∫¶„ÇíAPI„Ç≠„Éº„Å´Â§âÊèõ„Åô„Çã„Éò„É´„Éë„ÉºÈñ¢Êï∞
  const getDifficultyKey = (difficulty: DifficultyLevel): string => {
    const difficultyMap: Record<DifficultyLevel, string> = {
      toeic: "toeic",
      middle_school: "middle-school",
      high_school: "high-school",
      basic_verbs: "basic-verbs",
      business_email: "business-email",
      simulation: "simulation",
    };
    return difficultyMap[difficulty] || "middle-school";
  };

  const difficultyKey = getDifficultyKey(difficulty);

  // „É°„ÉÉ„Çª„Éº„Ç∏„É™„Éï„Ç°„É¨„É≥„Çπ - Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´Áî®
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´Ê©üËÉΩ - „É°„ÉÉ„Çª„Éº„Ç∏ËøΩÂä†ÊôÇ„Å´ÊúÄ‰∏ãÈÉ®„Å∏„Çπ„ÇØ„É≠„Éº„É´
  const scrollToBottom = () => {
    console.log("üîÑ scrollToBottom called, messages length:", messages.length);
    setTimeout(() => {
      if (messagesEndRef.current) {
        console.log("‚úÖ Scrolling to bottom, element found");
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      } else {
        console.log("‚ùå messagesEndRef.current is null");
      }
    }, 100);
  };
  
  // „É°„ÉÉ„Çª„Éº„Ç∏„ÅåËøΩÂä†„Åï„Çå„Çã„Åü„Å≥„Å´Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´
  useEffect(() => {
    console.log("üìù Messages changed, triggering scroll. Message count:", messages.length);
    scrollToBottom();
  }, [messages]);

  const toggleBookmark = (bookmarkKey: string) => {
    setBookmarkedProblems((prev) => {
      const newBookmarks = new Set(prev);
      if (newBookmarks.has(bookmarkKey)) {
        newBookmarks.delete(bookmarkKey);
      } else {
        newBookmarks.add(bookmarkKey);
      }

      // Save to localStorage for persistence
      localStorage.setItem(
        "englishTrainingBookmarks",
        JSON.stringify([...newBookmarks]),
      );
      return newBookmarks;
    });
  };

  // Load bookmarks from localStorage on component mount
  useEffect(() => {
    if (initializedRef.current) return;
    initializedRef.current = true;

    const savedBookmarks = localStorage.getItem("englishTrainingBookmarks");
    if (savedBookmarks) {
      try {
        const bookmarksArray = JSON.parse(savedBookmarks);
        setBookmarkedProblems(new Set(bookmarksArray));

        // If in bookmark mode, prepare available bookmarks for sequential solving
        if (isBookmarkMode) {
          const problems = bookmarksArray.map(
            (bookmark: string) => bookmark.split("_")[0],
          );
          setAvailableBookmarks(problems);
          // If starting with a specific problem, mark it as used
          if (initialProblem) {
            setUsedBookmarks(new Set([initialProblem.japaneseSentence]));
          }
        }
      } catch (error) {
        console.error("Failed to load bookmarks:", error);
      }
    }

    // ÂàùÊúüÂïèÈ°å„ÅÆËá™ÂãïË™≠„ÅøËæº„ÅøÔºàReact Strict ModeÂØæÂøúÔºâ
    if (initialProblem && !isStarted) {
      initializeWithInitialProblem();
    } else if (!initialProblem && !isStarted && !isBookmarkMode) {
      // ÈÄöÂ∏∏„É¢„Éº„Éâ„ÅßÂàùÊúüÂïèÈ°å„Åå„Å™„ÅÑÂ†¥Âêà„ÅØËá™ÂãïÁöÑ„Å´ÂïèÈ°å„ÇíÁîüÊàê
      console.log("No initial problem provided, generating first problem");
      loadNewProblemFromAPI();
    }
  }, []);

  const renderStarRating = (rating: number) => {
    return (
      <div className="flex items-center justify-start space-x-1 h-6">
        {/* Only show the number of stars equal to the rating */}
        {Array.from({ length: rating }, (_, index) => (
          <span
            key={index}
            className="text-lg text-yellow-400"
            style={{
              filter: "drop-shadow(0 1px 3px rgba(255,193,7,0.4))",
              textShadow: "0 1px 2px rgba(0,0,0,0.1)",
            }}
          >
            ‚≠ê
          </span>
        ))}
        <span className="text-sm text-gray-700 ml-2 font-medium">
          {rating}/5ÁÇπ
        </span>
      </div>
    );
  };

  // ÂàùÊúüÂïèÈ°å„ÅÆË®≠ÂÆöÔºà‰∫åÈáçÂÆüË°åÈò≤Ê≠¢Ôºâ
  const initializeWithInitialProblem = () => {
    if (loadingProblemRef.current || isStarted) return;

    setIsStarted(true);
    setCurrentProblem({
      japaneseSentence: initialProblem!.japaneseSentence,
      modelAnswer: initialProblem!.modelAnswer,
      hints: [],
      difficulty: difficulty,
    });
    setAwaitingAnswer(true);

    const problemMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "problem",
      content: initialProblem!.japaneseSentence,
      timestamp: new Date(),
    };
    setMessages([problemMessage]);
  };

  // Êñ∞„Åó„ÅÑÂïèÈ°å„ÅÆË™≠„ÅøËæº„ÅøÔºà‰∫åÈáçÂÆüË°åÈò≤Ê≠¢‰ªò„ÅçÔºâ
  const loadNewProblem = async () => {
    if (loadingProblemRef.current) {
      console.log("Problem loading already in progress, skipping...");
      return;
    }

    if (isBookmarkMode) {
      // „Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„É¢„Éº„Éâ„ÅÆÂá¶ÁêÜ
      loadBookmarkProblem();
    } else {
      // ÈÄöÂ∏∏„É¢„Éº„Éâ„ÅßAPI„Åã„ÇâÂïèÈ°å„ÇíÂèñÂæó
      await loadNewProblemFromAPI();
    }
  };

  const loadBookmarkProblem = () => {
    const remainingBookmarks = availableBookmarks.filter(
      (bookmark) => !usedBookmarks.has(bookmark),
    );

    if (remainingBookmarks.length === 0) {
      // ÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
      const completionMessage: ChatMessage = {
        id: Date.now().toString(),
        type: "system",
        content: "„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Åó„ÅüÂïèÈ°å„Çí„Åô„Åπ„Å¶ÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü„ÄÇ",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, completionMessage]);
      return;
    }

    // Ê¨°„ÅÆ„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØÂïèÈ°å„ÇíÈÅ∏Êäû
    const nextBookmark = remainingBookmarks[0];
    setUsedBookmarks((prev) => new Set([...prev, nextBookmark]));

    setCurrentProblem({
      japaneseSentence: nextBookmark,
      modelAnswer: "Please translate this sentence.",
      hints: [],
      difficulty: difficulty,
    });
    setAwaitingAnswer(true);

    const problemMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "problem",
      content: nextBookmark,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, problemMessage]);
    setProblemCount((prev) => prev + 1);
  };

  const loadNewProblemFromAPI = async () => {
    if (loadingProblemRef.current) {
      console.log("Problem loading already in progress, skipping...");
      return;
    }

    loadingProblemRef.current = true;
    setIsLoading(true);

    try {
      console.log("Fetching problem with difficulty:", difficulty);
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const response = await fetch("/api/problem", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          difficultyLevel: difficultyKey,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const problemData = await response.json();
      console.log("Received problem data:", problemData);

      const problem: Problem = {
        japaneseSentence: problemData.japaneseSentence,
        modelAnswer:
          problemData.modelAnswer || "Please translate this sentence.",
        hints: problemData.hints || [],
        difficulty: difficulty,
      };

      setCurrentProblem(problem);
      setAwaitingAnswer(true);

      // Track used problems to avoid repetition
      setUsedProblems((prev) => new Set([...prev, problem.japaneseSentence]));

      const problemMessage: ChatMessage = {
        id: Date.now().toString(),
        type: "problem",
        content: problem.japaneseSentence,
        timestamp: new Date(),
      };

      // Add new problem to existing messages (don't clear history)
      setMessages((prev) => [...prev, problemMessage]);
      setProblemCount((prev) => prev + 1);
      setIsStarted(true);
    } catch (error) {
      console.error("Failed to fetch problem:", error);

      // Fallback problem for each difficulty level
      const fallbackProblems = {
        toeic: "ÂõõÂçäÊúüÂ†±ÂëäÊõ∏„ÅÆÊèêÂá∫ÊúüÈôê„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        middle_school: "Êò®Êó•ÂèãÈÅî„Å®Êò†Áîª„ÇíË¶ã„Å´Ë°å„Åç„Åæ„Åó„Åü„ÄÇ",
        high_school: "„ÇÇ„ÅóÊôÇÈñì„Åå„ÅÇ„Çå„Å∞„ÄÅÂõ≥Êõ∏È§®„ÅßÂãâÂº∑„Åó„Åü„ÅÑ„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ",
        basic_verbs: "ÊØç„ÅØÊØéÊúù„Ç≥„Éº„Éí„Éº„Çí‰Ωú„Çä„Åæ„Åô„ÄÇ",
        business_email: "„ÅîÁ¢∫Ë™ç„ÅÑ„Åü„Å†„Åç„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ",
        simulation: "„Åô„Åø„Åæ„Åõ„Çì„ÄÅÈßÖ„Å∏„ÅÆÈÅì„ÇíÊïô„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      };

      const fallbackProblem =
        fallbackProblems[difficulty] || fallbackProblems.middle_school;

      const problem: Problem = {
        japaneseSentence: fallbackProblem,
        modelAnswer: "Please translate this sentence.",
        hints: [],
        difficulty: difficulty,
      };

      setCurrentProblem(problem);
      setAwaitingAnswer(true);

      const problemMessage: ChatMessage = {
        id: Date.now().toString(),
        type: "problem",
        content: problem.japaneseSentence,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, problemMessage]);
      setProblemCount((prev) => prev + 1);
      setIsStarted(true);
    } finally {
      setIsLoading(false);
      loadingProblemRef.current = false;
    }
  };

  const evaluateAnswerWithClaude = async (
    userAnswer: string,
    japaneseSentence: string,
    modelAnswer: string,
  ): Promise<EvaluationResult> => {
    if (evaluatingRef.current) {
      throw new Error("Evaluation already in progress");
    }

    evaluatingRef.current = true;

    try {
      console.log("Calling Claude API with:", {
        userAnswer,
        japaneseSentence,
        modelAnswer,
        difficulty,
      });

      // Add timeout to prevent freezing
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout

      const response = await fetch("/api/evaluate-with-claude", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          japaneseSentence,
          userTranslation: userAnswer,
          difficultyLevel: difficultyKey,
        }),
        signal: controller.signal,
      });

      clearTimeout(timeoutId);

      console.log("Claude API response status:", response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error("Claude API error response:", errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const evaluation = await response.json();
      console.log("Claude API evaluation received:", evaluation);
      return evaluation;
    } catch (error) {
      console.error("Claude API failed with error:", error);
      
      // Handle timeout/abort specifically
      if (error instanceof Error && error.name === 'AbortError') {
        console.warn("Claude API request timed out, using fallback evaluation");
      } else {
        console.warn("Using enhanced fallback evaluation");
      }

      // Enhanced fallback with detailed analysis based on actual user input
      let rating = 3;
      let specificFeedback = "";

      const userAnswerLower = userAnswer?.toLowerCase().trim() || "";

      // Check for meaningless inputs
      if (!userAnswer || userAnswerLower.length < 3) {
        rating = 1;
        specificFeedback = "ÂõûÁ≠î„ÅåÁ©∫„Åæ„Åü„ÅØÁü≠„Åô„Åé„Åæ„Åô„ÄÇÂÆåÊï¥„Å™Ëã±Êñá„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      } else if (
        ["test", "aaa", "bbb", "123", "hello", "ok", "yes", "no"].includes(
          userAnswerLower,
        )
      ) {
        rating = 1;
        specificFeedback =
          "ÈÅ©ÂΩì„Å™ÂõûÁ≠î„Åß„ÅØ„Å™„Åè„ÄÅÊó•Êú¨Ë™ûÊñá„ÇíÊ≠£Á¢∫„Å´Ëã±Ë®≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
      } else {
        // Analyze content for actual translation attempt
        rating = 3; // Default good rating for meaningful attempts
        const hasValidWords = /[a-zA-Z]{3,}/.test(userAnswer);
        const hasMultipleWords = userAnswer.split(/\s+/).length >= 3;
        const hasProperStructure =
          /^[A-Z]/.test(userAnswer) && /[.!?]$/.test(userAnswer);

        if (hasValidWords && hasMultipleWords) {
          // Compare similarity to model answer for better rating
          const modelWords = modelAnswer.toLowerCase().split(/\s+/);
          const userWords = userAnswer.toLowerCase().split(/\s+/);
          const matchingWords = userWords.filter((word) =>
            modelWords.includes(word),
          ).length;
          const similarity =
            matchingWords / Math.max(modelWords.length, userWords.length);

          // More lenient evaluation similar to original system
          if (similarity > 0.6 && hasProperStructure) {
            rating = 5;
            specificFeedback = "ÂÆåÁíß„Å´Ëøë„ÅÑÂõûÁ≠î„Åß„ÅôÔºÅÊñáÊ≥ï„ÉªË™ûÂΩô„Å®„ÇÇ„Å´ÈÅ©Âàá„Åß„Åô„ÄÇ";
          } else if (
            similarity > 0.4 ||
            (hasProperStructure && hasValidWords)
          ) {
            rating = 4;
            specificFeedback = "ËâØ„ÅÑÂõûÁ≠î„Åß„Åô„ÄÇÊÑèÂë≥„ÇÇÈÅ©Âàá„Å´‰ºù„Çè„Çä„Åæ„Åô„ÄÇ";
          } else if (similarity > 0.25 || hasValidWords) {
            rating = 3;
            specificFeedback =
              "Âü∫Êú¨ÁöÑ„Å™ÊÑèÂë≥„ÅØ‰ºù„Çè„Çä„Åæ„Åô„ÄÇ„Åì„ÅÆË™øÂ≠ê„ÅßÁ∂ö„Åë„Åæ„Åó„Çá„ÅÜ„ÄÇ";
          } else {
            rating = 3; // Default to 3 instead of 2 for more encouragement
            specificFeedback =
              "ËâØ„ÅÑÂõûÁ≠î„Åß„Åô„ÄÇÁ∂ôÁ∂ö„Åó„Å¶Á∑¥Áøí„Åô„Çã„Åì„Å®„ÅßÊõ¥„Å´‰∏äÈÅî„Åó„Åæ„Åô„ÄÇ";
          }
        } else {
          rating = 2;
          specificFeedback =
            "Ëã±Êñá„Å®„Åó„Å¶‰∏çÂÆåÂÖ®„Åß„Åô„ÄÇÂÆåÊï¥„Å™Êñá„ÅßÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ";
        }
      }

      const overallEvaluations = [
        [
          "ÂÆåÁíß„Å™Ëã±Ë®≥„Åß„ÅôÔºÅ",
          "„Éç„Ç§„ÉÜ„Ç£„Éñ„É¨„Éô„É´„ÅÆË°®ÁèæÂäõ„ÅåË∫´„Å´„Å§„ÅÑ„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åì„ÅÆË™øÂ≠ê„ÅßÊõ¥„Å™„ÇãÂêë‰∏ä„ÇíÁõÆÊåá„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ",
        ],
        [
          "Á¥†Êô¥„Çâ„Åó„ÅÑÂõûÁ≠î„Åß„ÅôÔºÅ",
          "ÊñáÊ≥ï„ÉªË™ûÂΩô„Å®„ÇÇ„Å´ÈÅ©Âàá„Åß„ÄÅÁõ∏Êâã„Å´Ê≠£Á¢∫„Å´ÊÑèÂõ≥„Åå‰ºù„Çè„ÇãË°®Áèæ„Åß„Åô„ÄÇ",
        ],
        [
          "ËâØ„ÅÑÂõûÁ≠î„Åß„Åô„ÄÇ",
          "ÊÑèÂë≥„ÅØÂçÅÂàÜ‰ºù„Çè„Çä„Åæ„Åô„Åå„ÄÅ„Çà„ÇäËá™ÁÑ∂„Å™Ë°®Áèæ„ÇíÊÑèË≠ò„Åô„Çã„Å®Êõ¥„Å´ËâØ„Åè„Å™„Çä„Åæ„Åô„ÄÇ",
        ],
        [
          "Âü∫Êú¨ÁöÑ„Å™ÊßãÈÄ†„Åã„ÇâË¶ãÁõ¥„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ",
          "Ëã±Ë™û„ÅÆÊñáÊ≥ï„É´„Éº„É´„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÄÅÊ≠£Á¢∫„Å™ÊñáÁ´†‰Ωú„Çä„ÇíÂøÉ„Åå„Åë„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        ],
        [
          "Ëã±Ë®≥„ÅÆÂü∫Á§é„Åã„ÇâÁ∑¥Áøí„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ",
          "Êó•Êú¨Ë™û„ÅÆÊÑèÂë≥„ÇíÊ≠£Á¢∫„Å´ÁêÜËß£„Åó„ÄÅËã±Ë™û„ÅÆË™ûÈ†Ü„ÅßÁµÑ„ÅøÁ´ã„Å¶„ÇãÁ∑¥Áøí„ÇíÈáç„Å≠„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        ],
      ];

      const overallEval = overallEvaluations[5 - rating] || [
        "ÂõûÁ≠î„ÇíË¶ãÁõ¥„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ",
        "Âü∫Êú¨ÁöÑ„Å™Ëã±Ë™ûË°®Áèæ„Åã„ÇâÁ¢∫Ë™ç„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
      ];

      // Create detailed explanations with problem-specific variations (minimum 4 lines)
      const getDetailedExplanation = (
        userAnswer: string,
        japaneseSentence: string,
        modelAnswer: string,
        rating: number,
        specificFeedback: string,
      ) => {
        const explanationTemplates = [
          // Business/Professional contexts
          {
            keywords: [
              "‰ºöË≠∞",
              "Ë≠∞È°å",
              "„Éó„É≠„Ç∏„Çß„ÇØ„Éà",
              "„ÉÅ„Éº„É†",
              "Â£≤‰∏ä",
              "ÁõÆÊ®ô",
              "ÊâøË™ç",
              "‰∫àÁÆó",
              "„Çπ„Ç±„Ç∏„É•„Éº„É´",
              "Â†±Âëä",
            ],
            explanations: [
              `${specificFeedback}\nÊ®°ÁØÑËß£Á≠î„Äå${modelAnswer}„Äç„Å®ÊØîËºÉ„Åô„Çã„Å®„ÄÅ${rating >= 4 ? "„Éì„Ç∏„Éç„ÇπËã±Ë™û„Å®„Åó„Å¶ÈÅ©Âàá„Å™Êï¨Ë™ûË°®Áèæ„Åå‰Ωø„Çè„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ" : rating >= 3 ? "ÊÑèÂë≥„ÅØ‰ºù„Çè„Çä„Åæ„Åô„Åå„ÄÅ„Çà„Çä„Éï„Ç©„Éº„Éû„É´„Å™Ë°®Áèæ„ÇíÂøÉ„Åå„Åë„Çã„Å®ËâØ„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ" : "„Éì„Ç∏„Éç„Çπ„Ç∑„Éº„É≥„Åß„ÅØÁõ∏Êâã„Å∏„ÅÆÈÖçÊÖÆ„ÇíÁ§∫„ÅôË°®Áèæ„ÅåÈáçË¶Å„Åß„Åô„ÄÇ"}\n${rating >= 3 ? "„Åì„ÅÆË°®Áèæ„ÅØÂÆüÈöõ„ÅÆËÅ∑Â†¥„Åß„ÇÇ‰Ωø„Åà„ÇãÂÆüÁî®ÁöÑ„Å™„Éï„É¨„Éº„Ç∫„Åß„Åô„ÄÇ" : "„ÄåCould you„Äç„ÇÑ„ÄåWould you mind„Äç„Å™„Å©„ÅÆ‰∏ÅÂØß„Å™‰æùÈ†ºË°®Áèæ„ÇíË¶ö„Åà„Åæ„Åó„Çá„ÅÜ„ÄÇ"}\nÁ∂ôÁ∂öÁöÑ„Å™Á∑¥Áøí„Å´„Çà„Çä„ÄÅÂõΩÈöõÁöÑ„Å™„Éì„Ç∏„Éç„ÇπÁí∞Â¢É„ÅßÈÄöÁî®„Åô„ÇãËã±Ë™ûÂäõ„ÅåË∫´„Å´„Å§„Åç„Åæ„Åô„ÄÇ`,

              `${specificFeedback}\nÊñáÊ≥ïÁöÑ„Å´„ÅØ${rating >= 4 ? "ÂÆåÁíß„Åß„ÄÅ„Éç„Ç§„ÉÜ„Ç£„Éñ„Çπ„Éî„Éº„Ç´„Éº„Å´„ÇÇËá™ÁÑ∂„Å´ËÅû„Åì„Åà„ÇãË°®Áèæ„Åß„Åô„ÄÇ" : rating >= 3 ? "Âü∫Êú¨ÊßãÈÄ†„ÅØÊ≠£„Åó„Åè„ÄÅÁõ∏Êâã„Å´ÊÑèÂõ≥„ÅåÊòéÁ¢∫„Å´‰ºù„Çè„Çä„Åæ„Åô„ÄÇ" : "Âü∫Êú¨ÁöÑ„Å™ÊñáÊ≥ï„É´„Éº„É´„ÅÆÁ¢∫Ë™ç„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"}\nË™ûÂΩôÈÅ∏Êäû„ÅÆË¶≥ÁÇπ„Åã„ÇâË¶ã„Çã„Å®„ÄÅ${rating >= 4 ? "Â†¥Èù¢„Å´ÈÅ©„Åó„ÅüÂ∞ÇÈñÄÁî®Ë™û„ÅåÈÅ©Âàá„Å´‰Ωø„Çè„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ" : rating >= 3 ? "„Çà„ÇäÂÖ∑‰ΩìÁöÑ„ÅßÂ∞ÇÈñÄÁöÑ„Å™ÂçòË™û„Çí‰Ωø„ÅÜ„Å®Âç∞Ë±°„ÅåËâØ„Åè„Å™„Çä„Åæ„Åô„ÄÇ" : "Êó•Â∏∏‰ºöË©±„É¨„Éô„É´„ÅÆÂü∫Êú¨ÂçòË™û„Åã„ÇâÊÆµÈöéÁöÑ„Å´Ë¶ö„Åà„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ"}\n${rating >= 2 ? "„Åì„ÅÆË™øÂ≠ê„ÅßÁ∑¥Áøí„ÇíÁ∂ö„Åë„Çå„Å∞„ÄÅÂøÖ„Åö‰∏äÈÅî„Åó„Åæ„Åô„ÄÇ" : "Âü∫Êú¨ÁöÑ„Å™ÊñáÂûã„Éë„Çø„Éº„É≥„ÅÆÂèçÂæ©Á∑¥Áøí„Çí„Åä„Åô„Åô„ÇÅ„Åó„Åæ„Åô„ÄÇ"}`,

              `${specificFeedback}\nËã±Ë™û„ÅÆËá™ÁÑ∂„Åï„Å®„ÅÑ„ÅÜÁÇπ„Åß„ÅØ„ÄÅ${rating >= 4 ? "„Éç„Ç§„ÉÜ„Ç£„Éñ„ÅåÂÆüÈöõ„Å´‰Ωø„ÅÜË°®Áèæ„Å´ÈùûÂ∏∏„Å´Ëøë„Åè„ÄÅÁ¥†Êô¥„Çâ„Åó„ÅÑË™ûÊÑü„Çí„ÅäÊåÅ„Å°„Åß„Åô„ÄÇ" : rating >= 3 ? "ÊÑèÂë≥„ÅØÈÄö„Åò„Åæ„Åô„Åå„ÄÅ„ÇÇ„ÅÜÂ∞ë„ÅóËã±Ë™û„Çâ„Åó„ÅÑË™ûÈ†Ü„ÇÑË°®Áèæ„ÇíÊÑèË≠ò„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ" : "Êó•Êú¨Ë™ûÁöÑ„Å™Áô∫ÊÉ≥„Åã„ÇâËÑ±Âç¥„Åó„ÄÅËã±Ë™ûÁã¨Áâπ„ÅÆË°®ÁèæÊñπÊ≥ï„ÇíË∫´„Å´„Å§„Åë„Çã„Åì„Å®„ÅåÈáçË¶Å„Åß„Åô„ÄÇ"}\n„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥ÂäπÊûú„ÇíËÄÉ„Åà„Çã„Å®„ÄÅ${rating >= 3 ? "„Åì„ÅÆ„É¨„Éô„É´„Å™„ÇâÂÆüÈöõ„ÅÆ„Éì„Ç∏„Éç„ÇπÂ†¥Èù¢„ÅßÂçÅÂàÜÈÄöÁî®„Åó„Åæ„Åô„ÄÇ" : "Áõ∏Êâã„Å´Ë™§Ëß£„Çí‰∏é„Åà„Å™„ÅÑ„Çà„ÅÜ„ÄÅ„Çà„ÇäÊòéÁ¢∫„ÅßÁ∞°ÊΩî„Å™Ë°®Áèæ„ÇíÂøÉ„Åå„Åë„Åæ„Åó„Çá„ÅÜ„ÄÇ"}\n‰ªäÂæå„ÅØÈ°û‰ººË°®Áèæ„ÅÆ„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥„ÇíÂ¢ó„ÇÑ„Åô„Åì„Å®„Åß„ÄÅ„Çà„ÇäÊüîËªü„Å™Ëã±Ë™ûË°®ÁèæÂäõ„ÅåË∫´„Å´„Å§„Åè„Åß„Åó„Çá„ÅÜ„ÄÇ`,
            ],
          },
          // Academic/Educational contexts
          {
            keywords: [
              "ÂàÜÊûê",
              "„Éá„Éº„Çø",
              "Á†îÁ©∂",
              "Â≠¶Áøí",
              "ÁêÜËß£",
              "Ë™¨Êòé",
              "Ë≥áÊñô",
              "ÊÉÖÂ†±",
              "Áü•Ë≠ò",
            ],
            explanations: [
              `${specificFeedback}\nÂ≠¶Ë°ìÁöÑ„Å™Ë°®Áèæ„Å®„Åó„Å¶Ë¶ã„Çã„Å®„ÄÅ${rating >= 4 ? "Ê≠£Á¢∫ÊÄß„Å®ÊòéÁ¢∫ÊÄß„ÇíÂÖº„Å≠ÂÇô„Åà„ÅüÂÑ™ÁßÄ„Å™Ëã±Ë®≥„Åß„Åô„ÄÇ" : rating >= 3 ? "Âü∫Êú¨ÁöÑ„Å™ÊÑèÂë≥„ÅØ‰ºù„Çè„Çä„Åæ„Åô„Åå„ÄÅ„Çà„ÇäÂ≠¶Ë°ìÁöÑ„Å™Ë™ûÂΩô„Çí‰Ωø„ÅÜ„Å®ËâØ„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ" : "Â≠¶Ë°ìËã±Ë™û„ÅÆÂü∫Êú¨ÊßãÈÄ†„Åã„ÇâÂ≠¶„Å≥Áõ¥„Åô„Åì„Å®„Çí„Åä„Åô„Åô„ÇÅ„Åó„Åæ„Åô„ÄÇ"}\nË™ûÂΩô„ÅÆÈÅ∏Êäû„Åß„ÅØ„ÄÅ${rating >= 4 ? "Â∞ÇÈñÄÊÄß„ÅÆÈ´ò„ÅÑÈÅ©Âàá„Å™Áî®Ë™û„Åå‰Ωø„Çè„Çå„Å¶„Åä„Çä„ÄÅË™≠„ÅøÊâã„Å´Ê≠£Á¢∫„Å™ÊÉÖÂ†±„Çí‰ºù„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ" : rating >= 3 ? "‰∏ÄËà¨ÁöÑ„Å™ÂçòË™û„ÅßÊÑèÂë≥„ÅØÈÄö„Åò„Åæ„Åô„Åå„ÄÅÂ∞ÇÈñÄÁî®Ë™û„Çí‰Ωø„ÅÜ„Å®„Çà„ÇäË™¨ÂæóÂäõ„ÅåÂ¢ó„Åó„Åæ„Åô„ÄÇ" : "Âü∫Êú¨ÁöÑ„Å™Â≠¶Ë°ìÁî®Ë™û„ÅÆÁøíÂæó„Åã„ÇâÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ„ÄÇ"}\nÊñáÁ´†ÊßãÈÄ†„Å´„Å§„ÅÑ„Å¶„ÅØ${rating >= 2 ? "Ë´ñÁêÜÁöÑ„Å™ÁµÑ„ÅøÁ´ã„Å¶„Åå„Åß„Åç„Å¶„Åä„Çä„ÄÅ„Åï„Çâ„Å™„ÇãÂêë‰∏ä„ÅåÊúüÂæÖ„Åß„Åç„Åæ„Åô„ÄÇ" : "‰∏ªË™û„ÉªËø∞Ë™û„ÉªÁõÆÁöÑË™û„ÅÆÈñ¢‰øÇ„ÇíÊòéÁ¢∫„Å´„Åô„ÇãÁ∑¥Áøí„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"}\nÁ∂ôÁ∂öÁöÑ„Å™Â≠¶Áøí„Å´„Çà„Çä„ÄÅÂõΩÈöõÁöÑ„Å™Â≠¶Ë°ìÁí∞Â¢É„Åß„ÇÇÈÄöÁî®„Åô„ÇãËã±Ë™ûÂäõ„ÇíË∫´„Å´„Å§„Åë„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ`,
            ],
          },
          // Daily conversation contexts
          {
            keywords: [
              "„ÅäÁñ≤„Çå",
              "„ÅÇ„Çä„Åå„Å®„ÅÜ",
              "„Åô„Åø„Åæ„Åõ„Çì",
              "„ÅäÈ°ò„ÅÑ",
              "Á¢∫Ë™ç",
              "ÈÄ£Áµ°",
              "ÊôÇÈñì",
              "Â†¥ÊâÄ",
            ],
            explanations: [
              `${specificFeedback}\nÊó•Â∏∏‰ºöË©±„Å®„Åó„Å¶„ÅØ„ÄÅ${rating >= 4 ? "Ëá™ÁÑ∂„ÅßË¶™„Åó„Åø„ÇÑ„Åô„ÅÑË°®Áèæ„Åå‰Ωø„Çè„Çå„Å¶„Åä„Çä„ÄÅÁõ∏Êâã„Å®„ÅÆËâØÂ•Ω„Å™Èñ¢‰øÇÊÄß„ÇíÁØâ„Åë„Åæ„Åô„ÄÇ" : rating >= 3 ? "Âü∫Êú¨ÁöÑ„Å™„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„ÅØÂèñ„Çå„Åæ„Åô„Åå„ÄÅ„ÇÇ„ÅÜÂ∞ë„ÅóËá™ÁÑ∂„Å™Ë°®Áèæ„ÇíÂøÉ„Åå„Åë„Åæ„Åó„Çá„ÅÜ„ÄÇ" : "Êó•Â∏∏ÁöÑ„Å´„Çà„Åè‰Ωø„Çè„Çå„ÇãÂü∫Êú¨„Éï„É¨„Éº„Ç∫„ÅÆÁøíÂæó„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ"}\nÊÑüÊÉÖË°®Áèæ„ÅÆË¶≥ÁÇπ„Åß„ÅØ„ÄÅ${rating >= 4 ? "Áõ∏Êâã„Å∏„ÅÆÈÖçÊÖÆ„ÇÑÊÑüË¨ù„ÅÆÊ∞óÊåÅ„Å°„ÅåÈÅ©Âàá„Å´Ë°®Áèæ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ" : rating >= 3 ? "Ê∞óÊåÅ„Å°„ÅØ‰ºù„Çè„Çä„Åæ„Åô„Åå„ÄÅ„Çà„ÇäË±ä„Åã„Å™ÊÑüÊÉÖË°®Áèæ„ÇíË∫´„Å´„Å§„Åë„Çã„Å®ËâØ„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ" : "Âü∫Êú¨ÁöÑ„Å™ÊÑüÊÉÖ„ÇíË°®„ÅôÂçòË™û„ÇÑË°®Áèæ„Åã„ÇâË¶ö„Åà„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ"}\nÂÆüÁî®ÊÄß„ÇíËÄÉ„Åà„Çã„Å®„ÄÅ${rating >= 3 ? "„Åì„ÅÆË°®Áèæ„ÅØÂÆüÈöõ„ÅÆÂ†¥Èù¢„Åß„Åù„ÅÆ„Åæ„Åæ‰Ωø„Åà„Çã‰æøÂà©„Å™„Éï„É¨„Éº„Ç∫„Åß„Åô„ÄÇ" : "Êó•Â∏∏ÁîüÊ¥ª„Åß„Çà„Åè‰Ωø„ÅÜÂü∫Êú¨ÁöÑ„Å™Ë°®Áèæ„Éë„Çø„Éº„É≥„ÇíË¶ö„Åà„Çã„Åì„Å®„Åã„ÇâÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ„ÄÇ"}\nÊØéÊó•„ÅÆÁ∑¥Áøí„ÇíÈÄö„Åò„Å¶„ÄÅ„Çà„ÇäËá™ÁÑ∂„ÅßÊµÅÊö¢„Å™Ëã±Ë™û„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥ËÉΩÂäõ„ÇíÂêë‰∏ä„Åï„Åõ„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ`,
            ],
          },
        ];

        // Find matching template based on keywords
        let selectedTemplate = explanationTemplates[2]; // Default to daily conversation
        for (const template of explanationTemplates) {
          if (
            template.keywords.some((keyword) =>
              japaneseSentence.includes(keyword),
            )
          ) {
            selectedTemplate = template;
            break;
          }
        }

        // Select random explanation from the matched template
        const randomIndex = Math.floor(
          Math.random() * selectedTemplate.explanations.length,
        );
        return selectedTemplate.explanations[randomIndex] || specificFeedback;
      };

      const detailedExplanation = getDetailedExplanation(
        userAnswer,
        japaneseSentence,
        modelAnswer,
        rating,
        specificFeedback,
      );

      const fallbackSimilarPhrases: Record<string, string[]> = {
        "ÊòéÊó•„ÅØÂèãÈÅî„Å®ÈÅä„Å≥„Åæ„Åô„ÄÇ": [
          "I will hang out with my friends tomorrow.",
          "Tomorrow I'm going to spend time with my friends.",
        ],
        "ÁßÅ„ÅØÊØéÊó•Â≠¶Ê†°„Å´Ë°å„Åç„Åæ„Åô„ÄÇ": [
          "I go to school every day.",
          "I attend school daily.",
        ],
        "‰ªäÊó•„ÅØÈõ®„ÅåÈôç„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ": [
          "It is raining today.",
          "It's a rainy day today.",
        ],
        "ÂΩºÂ•≥„ÅØÊú¨„ÇíË™≠„ÇÄ„ÅÆ„ÅåÂ•Ω„Åç„Åß„Åô„ÄÇ": [
          "She likes reading books.",
          "She enjoys reading books.",
        ],
        "ÁßÅ„Åü„Å°„ÅØÊò®Êó•Êò†Áîª„ÇíË¶ã„Åæ„Åó„Åü„ÄÇ": [
          "We watched a movie yesterday.",
          "We saw a film yesterday.",
        ],
      };

      // Generate appropriate model answer based on Japanese sentence
      const generateModelAnswer = (japaneseSentence: string): string => {
        const modelAnswers: Record<string, string> = {
          "ÊòéÊó•„ÅØÂèãÈÅî„Å®ÈÅä„Å≥„Åæ„Åô„ÄÇ": "I will play with my friends tomorrow.",
          "ÁßÅ„ÅØÊØéÊó•Â≠¶Ê†°„Å´Ë°å„Åç„Åæ„Åô„ÄÇ": "I go to school every day.",
          "‰ªäÊó•„ÅØÈõ®„ÅåÈôç„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ": "It is raining today.",
          "ÂΩºÂ•≥„ÅØÊú¨„ÇíË™≠„ÇÄ„ÅÆ„ÅåÂ•Ω„Åç„Åß„Åô„ÄÇ": "She likes reading books.",
          "ÁßÅ„Åü„Å°„ÅØÊò®Êó•Êò†Áîª„ÇíË¶ã„Åæ„Åó„Åü„ÄÇ": "We watched a movie yesterday.",
          "ÂΩº„ÅØÊØéÊúùËµ∞„Çä„Åæ„Åô„ÄÇ": "He runs every morning.",
          "ÁßÅ„ÅØÊú¨„ÇíË™≠„Åø„Åæ„Åô„ÄÇ": "I read books.",
          "ÂΩºÂ•≥„ÅØÊñôÁêÜ„Çí‰Ωú„Çä„Åæ„Åô„ÄÇ": "She cooks meals.",
          "ÁßÅ„Åü„Å°„ÅØÈü≥Ê•Ω„ÇíËÅû„Åç„Åæ„Åô„ÄÇ": "We listen to music.",
          "Â≠ê‰æõ„Åü„Å°„ÅØÂÖ¨Âúí„ÅßÈÅä„Å≥„Åæ„Åô„ÄÇ": "Children play in the park.",
        };
        return modelAnswers[japaneseSentence] || "Please translate this sentence accurately.";
      };

      return {
        rating,
        overallEvaluation: overallEval[0] || "ËâØ„ÅÑÂõûÁ≠î„Åß„Åô",
        detailedComment: overallEval[1] || "Á∂ôÁ∂öÁöÑ„Å™Á∑¥Áøí„ÅßÊõ¥„Å´Âêë‰∏ä„Åß„Åç„Åæ„Åô",
        correctTranslation: generateModelAnswer(japaneseSentence),
        modelAnswer: generateModelAnswer(japaneseSentence),
        explanation: detailedExplanation,
        similarPhrases: fallbackSimilarPhrases[japaneseSentence] || [
          "Good effort! Keep practicing.",
          "Try using more natural English expressions.",
        ],
      };
    } finally {
      evaluatingRef.current = false;
    }
  };

  const submitAnswer = async () => {
    if (!userInput.trim() || !currentProblem || !awaitingAnswer) return;

    if (submittingRef.current) {
      console.log("Answer submission already in progress, skipping...");
      return;
    }

    submittingRef.current = true;
    setIsLoading(true);
    setAwaitingAnswer(false);

    // Add user answer to chat
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "user_answer",
      content: userInput,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    const currentUserInput = userInput;
    setUserInput("");

    try {
      // Get evaluation from Claude
      const evaluation = await evaluateAnswerWithClaude(
        currentUserInput,
        currentProblem.japaneseSentence,
        currentProblem.modelAnswer,
      );

      // Add evaluation messages in sequence with overall evaluation first
      setTimeout(() => {
        const ratingMessage: ChatMessage = {
          id: (Date.now() + 1).toString(),
          type: "evaluation",
          content: `${evaluation.rating}/5ÁÇπ`,
          rating: evaluation.rating,
          timestamp: new Date(),
        };
        setMessages((prev) => [...prev, ratingMessage]);

        setTimeout(() => {
          // Use Claude's overallEvaluation if available, otherwise fallback to rating-based evaluation
          const overallEval =
            evaluation.overallEvaluation ||
            (evaluation.rating >= 4
              ? "Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅÂÆåÁíß„Å™ÂõûÁ≠î„Åß„Åô„ÄÇ"
              : evaluation.rating >= 3
                ? "ËâØ„ÅÑÂõûÁ≠î„Åß„Åô„Åå„ÄÅÊîπÂñÑ„ÅÆ‰ΩôÂú∞„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ"
                : "„ÇÇ„ÅÜÂ∞ë„ÅóËá™ÁÑ∂„Å™Ë°®Áèæ„ÇíÂøÉ„Åå„Åë„Åæ„Åó„Çá„ÅÜ„ÄÇ");

          const overallMessage: ChatMessage = {
            id: (Date.now() + 2).toString(),
            type: "overall_evaluation",
            content: overallEval,
            detailedComment: evaluation.detailedComment,
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, overallMessage]);

          setTimeout(() => {
            const modelAnswerMessage: ChatMessage = {
              id: (Date.now() + 3).toString(),
              type: "model_answer",
              content: evaluation.correctTranslation || evaluation.modelAnswer || currentProblem.modelAnswer,
              timestamp: new Date(),
            };
            setMessages((prev) => [...prev, modelAnswerMessage]);

            setTimeout(() => {
              const explanationMessage: ChatMessage = {
                id: (Date.now() + 4).toString(),
                type: "explanation",
                content: evaluation.explanation || evaluation.feedback || "Good effort! Keep practicing to improve.",
                timestamp: new Date(),
              };
              setMessages((prev) => [...prev, explanationMessage]);

              setTimeout(() => {
                const phrasesMessage: ChatMessage = {
                  id: (Date.now() + 5).toString(),
                  type: "similar_phrases",
                  content: "È°û‰ºº„Éï„É¨„Éº„Ç∫",
                  phrases: evaluation.similarPhrases || [],
                  timestamp: new Date(),
                };
                setMessages((prev) => [...prev, phrasesMessage]);

                // Ëá™ÂãïÁöÑ„Å´Ê¨°„ÅÆÂïèÈ°å„ÇíÁîüÊàê
                setTimeout(() => {
                  loadNewProblem();
                }, 1000);
              }, 800);
            }, 800);
          }, 800);
        }, 800);
      }, 500);
    } catch (error) {
      console.error("Evaluation error:", error);
      setAwaitingAnswer(true); // Re-enable input on error
    } finally {
      setIsLoading(false);
      submittingRef.current = false;
      evaluatingRef.current = false; // Critical: Reset evaluation flag
    }
  };

  const handleNextProblem = () => {
    if (loadingProblemRef.current) {
      console.log(
        "Problem loading already in progress, skipping next button...",
      );
      return;
    }
    loadNewProblem();
  };

  const handleStartTraining = () => {
    if (loadingProblemRef.current || isStarted) {
      console.log("Training already started or loading in progress...");
      return;
    }
    console.log("Starting training manually");
    loadNewProblemFromAPI();
  };

  const renderMessage = (message: ChatMessage) => {
    switch (message.type) {
      case "problem":
        const problemNumber =
          messages
            .filter((m) => m.type === "problem")
            .findIndex((m) => m.id === message.id) + 1;
        const bookmarkKey = `${message.content}_${problemNumber}`;
        const isBookmarked = bookmarkedProblems.has(bookmarkKey);
        return (
          <div key={message.id} className="flex justify-start mb-6">
            <div
              className={`${isBookmarked ? "bg-yellow-400" : "bg-blue-400"} rounded-full w-12 h-8 flex items-center justify-center mr-3 flex-shrink-0 cursor-pointer transition-colors hover:bg-yellow-500`}
              onClick={() => toggleBookmark(bookmarkKey)}
              title={isBookmarked ? "„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„ÇíËß£Èô§" : "„Éñ„ÉÉ„ÇØ„Éû„Éº„ÇØ„Å´ËøΩÂä†"}
            >
              <span className="text-white text-sm">
                {isBookmarked ? "‚≠ê" : "‚òÜ"}
              </span>
            </div>
            <div className="bg-white rounded-2xl rounded-tl-md px-4 py-3 max-w-sm shadow-sm border">
              <div className="text-sm font-medium text-gray-800 mb-1">
                ÂïèÈ°å {problemNumber} - ÁøªË®≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ
              </div>
              <div className="text-gray-800">{message.content}</div>
            </div>
          </div>
        );

      case "user_answer":
        return (
          <div key={message.id} className="flex justify-end mb-6">
            <div className="bg-blue-500 text-white rounded-2xl rounded-tr-md px-4 py-3 max-w-sm md:mr-[72px]">
              {message.content}
            </div>
          </div>
        );

      case "evaluation":
        // Unified evaluation box - find all related messages
        const relatedMessages = messages.filter(
          (m) =>
            m.timestamp &&
            message.timestamp &&
            Math.abs(m.timestamp.getTime() - message.timestamp.getTime()) <
              5000 &&
            [
              "evaluation",
              "overall_evaluation",
              "model_answer",
              "explanation",
              "similar_phrases",
            ].includes(m.type),
        );

        const overallEval = relatedMessages.find(
          (m) => m.type === "overall_evaluation",
        );
        const modelAnswer = relatedMessages.find(
          (m) => m.type === "model_answer",
        );
        const explanation = relatedMessages.find(
          (m) => m.type === "explanation",
        );
        const similarPhrases = relatedMessages.find(
          (m) => m.type === "similar_phrases",
        );

        return (
          <div key={message.id} className="flex justify-start mb-6">
            <div className="bg-green-500 rounded-full w-12 h-8 flex items-center justify-center mr-3 flex-shrink-0">
              <span className="text-white text-sm">‚≠ê</span>
            </div>
            <div className="bg-white rounded-lg px-4 py-4 max-w-lg shadow-sm border space-y-4">
              {/* Star Rating - Fixed Height */}
              <div className="rating-box flex items-center justify-start bg-transparent border border-gray-200 rounded-lg px-3 py-1 h-8">
                {renderStarRating(message.rating || 0)}
              </div>

              {/* Overall Evaluation */}
              {overallEval && (
                <div className="bg-yellow-50 rounded-lg p-3 border border-yellow-200">
                  <div className="text-sm font-medium text-yellow-800 mb-1">
                    ÂÖ®‰ΩìË©ï‰æ°
                  </div>
                  <div className="text-gray-800 font-medium mb-2">
                    {overallEval.content}
                  </div>
                  {overallEval.detailedComment && (
                    <div className="text-gray-700 text-sm">
                      {overallEval.detailedComment}
                    </div>
                  )}
                </div>
              )}

              {/* Model Answer */}
              {modelAnswer && (
                <div className="bg-green-50 rounded-lg p-3 border border-green-200">
                  <div className="flex items-center justify-between mb-1">
                    <div className="text-sm font-medium text-green-800">
                      Ê®°ÁØÑËß£Á≠î
                    </div>
                    <button
                      onClick={() => speakText(modelAnswer.content)}
                      className="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded-full text-sm font-medium transition-colors shadow-sm hover:shadow-md"
                      title="Èü≥Â£∞„ÅßËÅû„Åè"
                    >
                      üéµ Èü≥Â£∞
                    </button>
                  </div>
                  <div className="text-gray-800 text-lg">
                    {modelAnswer.content}
                  </div>
                </div>
              )}

              {/* Explanation */}
              {explanation && (
                <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
                  <div className="text-sm font-medium text-blue-800 mb-1">
                    Ëß£Ë™¨
                  </div>
                  <div className="text-gray-800 whitespace-pre-line leading-relaxed">
                    {explanation.content}
                  </div>
                </div>
              )}

              {/* Similar Phrases */}
              {similarPhrases && similarPhrases.phrases && (
                <div className="bg-purple-50 rounded-lg p-3 border border-purple-200">
                  <div className="text-sm font-medium text-purple-800 mb-2">
                    È°û‰ºº„Éï„É¨„Éº„Ç∫
                  </div>
                  <div className="space-y-1">
                    {similarPhrases.phrases.map((phrase, index) => (
                      <div key={index} className="flex items-center justify-between text-gray-800 text-base">
                        <span>‚Ä¢ {phrase}</span>
                        <button
                          onClick={() => speakText(phrase)}
                          className="bg-purple-500 hover:bg-purple-600 text-white px-2 py-1 rounded-full text-xs font-medium transition-colors shadow-sm hover:shadow-md ml-2 flex-shrink-0"
                          title="Èü≥Â£∞„ÅßËÅû„Åè"
                        >
                          üéµ
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        );

      case "overall_evaluation":
      case "model_answer":
      case "explanation":
      case "similar_phrases":
        // These are now handled within the evaluation case - return null to avoid duplication
        return null;

      case "next_button":
        return (
          <div key={message.id} className="flex justify-center mb-6">
            <button
              onClick={handleNextProblem}
              disabled={loadingProblemRef.current}
              className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-medium py-3 px-8 rounded-lg transition-colors shadow-sm"
            >
              {loadingProblemRef.current ? "Ë™≠„ÅøËæº„Åø‰∏≠..." : "Ê¨°„ÅÆÂïèÈ°å"}
            </button>
          </div>
        );

      case "system":
        return (
          <div key={message.id} className="flex justify-center mb-6">
            <div className="bg-blue-100 rounded-lg px-4 py-3 text-center">
              <div className="text-blue-800 font-medium">{message.content}</div>
              {message.content.includes("ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü") && (
                <button
                  onClick={onBackToMenu}
                  className="mt-3 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm transition-colors"
                >
                  „É°„Éã„É•„Éº„Å´Êàª„Çã
                </button>
              )}
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <div className="bg-white shadow-sm border-b px-4 py-3">
        <div className="flex items-center justify-between">
          <button
            onClick={onBackToMenu}
            className="text-gray-600 hover:text-gray-800"
          >
            ‚Üê „É°„Éã„É•„Éº„Å´Êàª„Çã
          </button>
          <h1 className="font-medium text-gray-900">Ëã±‰ΩúÊñá„Éà„É¨„Éº„Éã„É≥„Ç∞</h1>
          <button
            onClick={onGoToMyPage}
            className="text-gray-600 hover:text-gray-800 transition-colors"
          >
            üë§ „Éû„Ç§„Éö„Éº„Ç∏
          </button>
        </div>
      </div>

      {/* Start Training Button (if not started and no initial problem) */}
      {!isStarted && !initialProblem && (
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">
              Ëã±‰ΩúÊñá„Éà„É¨„Éº„Éã„É≥„Ç∞„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ
            </h2>
            <button
              onClick={handleStartTraining}
              disabled={loadingProblemRef.current}
              className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 disabled:cursor-not-allowed text-white font-medium py-3 px-8 rounded-lg transition-colors shadow-sm"
            >
              {loadingProblemRef.current
                ? "ÂïèÈ°å„ÇíË™≠„ÅøËæº„Åø‰∏≠..."
                : "Á∑¥Áøí„ÇíÈñãÂßã„Åô„Çã"}
            </button>
          </div>
        </div>
      )}

      {/* Chat Messages */}
      {(isStarted || initialProblem) && (
        <div className="flex-1 overflow-y-auto px-4 py-6 relative">
          {/* Scroll to Top Button - Fixed position in bottom right */}
          <button
            onClick={() => {
              // Multiple fallback strategies to ensure scrolling works
              const chatContainer = document.querySelector('.flex-1.overflow-y-auto');
              const bodyElement = document.body;
              const htmlElement = document.documentElement;
              
              console.log('Scroll button clicked, trying multiple scroll methods');
              
              // Method 1: Try the chat container
              if (chatContainer && chatContainer.scrollTop > 0) {
                chatContainer.scrollTo({ top: 0, behavior: 'smooth' });
                console.log('Scrolled chat container to top');
                return;
              }
              
              // Method 2: Try body
              if (bodyElement.scrollTop > 0) {
                bodyElement.scrollTo({ top: 0, behavior: 'smooth' });
                console.log('Scrolled body to top');
                return;
              }
              
              // Method 3: Try document element
              if (htmlElement.scrollTop > 0) {
                htmlElement.scrollTo({ top: 0, behavior: 'smooth' });
                console.log('Scrolled html to top');
                return;
              }
              
              // Method 4: Use window as final fallback
              window.scrollTo({ top: 0, behavior: 'smooth' });
              console.log('Scrolled window to top');
            }}
            className="fixed bottom-24 right-6 z-50 bg-gray-300 hover:bg-gray-400 text-gray-600 p-1 rounded-full shadow-md transition-colors text-xs"
            title="‰∏ä„Å´Êàª„Çã"
            style={{ position: 'fixed', bottom: '96px', right: '24px', zIndex: 50, width: '32px', height: '32px', fontSize: '12px' }}
          >
            ‚Üë
          </button>
          
          <div className="max-w-4xl mx-auto">
            {messages.map((message) => renderMessage(message))}
            {/* Remove loading message to fix flash issue */}
            <div ref={messagesEndRef} />
          </div>
        </div>
      )}

      {/* Input Area */}
      {awaitingAnswer && (isStarted || initialProblem) && (
        <div className="bg-white border-t px-4 py-3">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center space-x-3">
              <input
                type="text"
                value={userInput}
                onChange={(e) => setUserInput(e.target.value)}
                onKeyPress={(e) =>
                  e.key === "Enter" && !submittingRef.current && submitAnswer()
                }
                placeholder="Ëã±Ë®≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."
                className="flex-1 px-4 py-2 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                disabled={isLoading || submittingRef.current}
              />
              <button
                onClick={submitAnswer}
                disabled={isLoading || !userInput.trim() || submittingRef.current}
                className="bg-blue-500 hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed text-white p-2 rounded-full transition-colors"
              >
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
