
```
目的: サインアップ/ログインの不安定を修正し、既存メールのエラー表示・確認メール・プラン選択への遷移を正常化する

=== 0) 前提: Secrets/設定の確認 ===
- Replit Secrets に以下が入っていること
  VITE_SUPABASE_URL
  VITE_SUPABASE_ANON_KEY
  SUPABASE_SERVICE_ROLE_KEY
  SERVE_CLIENT = "true"

- Supabase ダッシュボード設定:
  Auth → Email:
    Allow new users to sign up = ON
    Confirm email = ON（確認メールを送る運用）※ONにしないなら 2) の分岐で即ログインへ
  Auth → URL Configuration:
    Site URL = https://<あなたの replit 公開URL>
    Redirect URLs に https://<あなたの replit 公開URL>/auth-callback を追加
  Auth → Captcha/Protection:
    Captcha は一旦 OFF（切り分けのため）

=== 1) supabase クライアントの正規化 ===
- ファイル: client/src/lib/supabaseClient.ts を以下に置き換え

import { createClient } from "@supabase/supabase-js";

const url = import.meta.env.VITE_SUPABASE_URL!;
const anon = import.meta.env.VITE_SUPABASE_ANON_KEY!;

if (typeof window !== "undefined") {
  (window as any).SUPA_DEBUG = { url, anonHead: anon?.slice(0, 12) };
}

export const supabase = createClient(url, anon, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
    storage: typeof window !== "undefined" ? window.localStorage : undefined,
  },
});

=== 2) signup-simple を完全修正（ハードコード/自動POSTを排除） ===
- ファイル: client/src/pages/signup-simple.tsx を全面差し替え
  ・フォーム入力の email/password をそのまま signUp に渡す
  ・Confirm Email = ON の時は「確認メール送信」のUIを出して終了
  ・Confirm Email = OFF の時は signUp 成功後に signInWithPassword して /subscription-select へ
  ・既存メール時（422/400）は「このメールアドレスは既に登録されています」を表示

import React, { useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { useNavigate } from "react-router-dom";

export default function SignupSimple() {
  const nav = useNavigate();
  const [email, setEmail] = useState("");
  const [pw, setPw] = useState("");
  const [msg, setMsg] = useState<string|null>(null);
  const [loading, setLoading] = useState(false);

  async function onSubmit(e: React.FormEvent) {
    e.preventDefault();
    setMsg(null);
    setLoading(true);
    try {
      const { data, error } = await supabase.auth.signUp({
        email,
        password: pw,
        options: { emailRedirectTo: `${window.location.origin}/auth-callback` }
      });
      if (error) {
        // 既存メールなど
        if ((error as any).status === 422 || (error as any).status === 400) {
          setMsg("このメールアドレスは既に登録されています。ログインをお試しください。");
        } else {
          setMsg(`サインアップに失敗: ${error.message}`);
        }
        return;
      }
      // Confirm Email = ON の場合は session が付かないので案内だけ表示
      if (data?.user && !data?.session) {
        setMsg("確認メールを送信しました。メール内のリンクから認証を完了してください。");
        return;
      }
      // Confirm Email = OFF の運用時は即ログイン＆遷移（保険として実装）
      if (data?.user && data?.session) {
        nav("/subscription-select");
      }
    } catch (e: any) {
      setMsg(`サインアップエラー: ${e.message || e}`);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div style={{maxWidth:480, margin:"40px auto", padding:16}}>
      <h1>Signup Simple (Debug)</h1>
      <form onSubmit={onSubmit}>
        <input value={email} onChange={e=>setEmail(e.target.value)} placeholder="email" type="email" required />
        <input value={pw} onChange={e=>setPw(e.target.value)} placeholder="password" type="password" required />
        <button disabled={loading} type="submit">Create Account</button>
      </form>
      {msg && <p style={{marginTop:12}}>{msg}</p>}
      <pre style={{marginTop:12}}>{typeof window !== "undefined" ? JSON.stringify((window as any).SUPA_DEBUG,null,2) : null}</pre>
    </div>
  );
}

=== 3) auth-callback の最終化（メールリンク→セッション確立→プラン画面） ===
- ファイル: client/src/pages/auth-callback.tsx を以下に置き換え

import React, { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";

export default function AuthCallback() {
  const [msg, setMsg] = useState("認証処理中...");

  useEffect(() => {
    (async () => {
      try {
        const p = new URLSearchParams(window.location.search);
        const code = p.get("code");
        if (code) {
          const { error } = await supabase.auth.exchangeCodeForSession(code);
          if (error) throw error;
        }
        const { data } = await supabase.auth.getSession();
        if (data.session) {
          window.location.replace("/subscription-select");
          return;
        }
        setMsg("認証リンクが無効または期限切れです。もう一度お試しください。");
      } catch (e: any) {
        setMsg(`認証エラー: ${e.message || e}`);
      }
    })();
  }, []);

  return <div style={{padding:24}}>{msg}</div>;
}

=== 4) ルートガードの見直し（初期化完了まで何もしない） ===
- ファイル: client/src/App.tsx を確認・修正
  ・publicPaths に "/login", "/signup", "/signup-simple", "/auth-callback" を含める
  ・Auth 初期化フラグ initialized が true になるまでガードしない
  ・session が無い 非公開パス → /login にリダイレクト
  ・ログイン成功後（onAuthStateChange）に session を反映

（既に実装済みならOK。未実装なら初期化待ちと publicPaths を追加）

=== 5) サーバの静的配信と SPA fallback を確認 ===
- ファイル: server/index.ts
  ・dist/client を static で配信
  ・app.get("*", ...) で index.html を返す fallback を最後に置く
  ・/health と /__introspect が動作すること（既にOK）

=== 6) ビルド＆起動 ===
rm -rf dist client/dist
npm run build:server && npm run build:client
node dist/server/index.js
```
